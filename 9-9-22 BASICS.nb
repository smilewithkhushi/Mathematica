(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    197403,       4500]
NotebookOptionsPosition[    182597,       4261]
NotebookOutlinePosition[    182961,       4277]
CellTagsIndexPosition[    182918,       4274]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["", "Text",
 CellChangeTimes->{{3.871700318748051*^9, 3.871700338009166*^9}, {
  3.871700377788953*^9, 3.8717003797260227`*^9}, {3.871700780948065*^9, 
  3.871700799368286*^9}},ExpressionUUID->"609d4fbe-85cf-4718-9798-\
1eef58193793"],

Cell[CellGroupData[{

Cell["9/9/2022 : BASICS OF MATHEMATICA", "Title",
 CellChangeTimes->{
  3.8717007787187047`*^9},ExpressionUUID->"9f2d0c4c-81c2-4b8f-9705-\
856db65a87e5"],

Cell["", "Text",
 CellChangeTimes->{{3.871701196515093*^9, 3.871701201014059*^9}, {
  3.8717013155384207`*^9, 
  3.871701319584032*^9}},ExpressionUUID->"c2a55559-47a0-47fa-8c1a-\
d508d5185333"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "+", "3"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8717013283788776`*^9, 3.8717013295194664`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"6bcf72db-6590-4c6a-9356-d314771d7319"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.8717013303471336`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"c0244d9d-96bd-4913-a599-4b1fe5e07ae4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"6", "^", "3"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.871701422561901*^9, 3.8717014298418016`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"2e31ae98-9a69-4756-bd8e-7401201866f5"],

Cell[BoxData["216"], "Output",
 CellChangeTimes->{{3.871701425889248*^9, 3.8717014336686497`*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"c9861060-f770-4892-8841-a1faa09b78f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"23", "*", "21"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.871701437558707*^9, 3.8717014401828136`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"dd71fe23-5ef0-4dbc-90c7-cd47d33483a5"],

Cell[BoxData["483"], "Output",
 CellChangeTimes->{3.871701440932575*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"79f1f6c1-7c91-4e6c-ae62-ef0ec541cd1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"25", "/", "4"}]], "Input",
 CellChangeTimes->{{3.8717014444005175`*^9, 3.8717014460251856`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"4b3b29cb-e6c4-413e-b9d3-4fcee8f21975"],

Cell[BoxData[
 FractionBox["25", "4"]], "Output",
 CellChangeTimes->{3.8717014467281246`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"b003f3bd-5f02-49fb-8b55-016295ddc0f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"25", "/", "5"}]], "Input",
 CellChangeTimes->{{3.871701449977668*^9, 3.871701450508786*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"be67a97c-a1d0-4911-aa30-93110318b560"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.8717014511177254`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"b5370e2a-2d6a-46b3-b4e3-0824b7305b52"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"999", "-", "678"}]], "Input",
 CellChangeTimes->{{3.8717014601158295`*^9, 3.871701464146246*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"73fc1bb8-af1b-4711-9956-1c46ea433ce7"],

Cell[BoxData["321"], "Output",
 CellChangeTimes->{3.871701597511959*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"863d0d1a-6528-471b-9237-8b98661288eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", " ", "3"}]], "Input",
 CellChangeTimes->{{3.871701494553647*^9, 3.8717015050980453`*^9}, {
  3.8717016010580273`*^9, 3.8717016164609613`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"6d3197a7-e937-47b0-95ef-95981098d1ee"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.871701685131385*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"ad269c0f-9ff0-4553-b916-0e1e449530af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"5", "\\2"}]], "Input",
 CellChangeTimes->{{3.871701678407757*^9, 3.871701710289035*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[15]:=",ExpressionUUID->"30f971ff-d8ea-45b0-89b6-55902dfafe3d"],

Cell[BoxData[
 TemplateBox[{
  "Syntax","sntoct1",
   "\"3 octal digits are required after \\\\ to construct an 8-bit character.\
\"",2,15,3,16848562495805431554,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8717017272537785`*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"b0081ea8-da73-4ec5-888f-19bfcdee09be"],

Cell[BoxData[
 TemplateBox[{
  "Syntax","tsntxi",
   "\"\\\"\\!\\(\\*RowBox[{\\\"5\\\", \\\"\\\\\\\\2\\\"}]\\)\\\" is \
incomplete; more input is \
needed.\\!\\(\\*RowBox[{\\\"\\\\\\\"\\\\\\\"\\\"}]\\)\"",2,15,4,
   16848562495805431554,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8717017275037193`*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"9527e3e9-7aa8-4419-9539-d36cafb22d8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"20", "//", "3"}]], "Input",
 CellChangeTimes->{{3.8717016229438143`*^9, 3.871701626663657*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"0c64c679-06b1-446f-8bb4-ee452b1706ef"],

Cell[BoxData[
 RowBox[{"3", "[", "20", "]"}]], "Output",
 CellChangeTimes->{3.871701800532216*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"393d8bd6-4e93-47b9-b741-830c7ca53685"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"times", "[", 
  RowBox[{"3", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.8717018024071083`*^9, 
  3.8717018090462165`*^9}},ExpressionUUID->"a8aa67ef-60ed-45c3-a46b-\
f41fdb7cb1be"],

Cell[BoxData[
 RowBox[{"times", "[", 
  RowBox[{"3", ",", "4"}], "]"}]], "Output",
 CellChangeTimes->{3.8717018061871758`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"49dab5b9-b87a-4057-b77a-ff331947c5e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Divide", "[", 
   RowBox[{"45", ",", "5"}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8717017616367025`*^9, 3.8717017981265364`*^9}, {
  3.871701874595117*^9, 3.871701882078065*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"c79a9005-dd19-4eb4-9c70-a3116cacb59f"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{3.871701882796318*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"6065c5ac-1dbb-4d40-a41a-4b96740ecbef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2.5", "*", "5.2"}]], "Input",
 CellChangeTimes->{{3.8717019392791758`*^9, 3.8717019614927025`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"3f4dd674-1dbf-415a-a817-c15cd63c6997"],

Cell[BoxData["13.`"], "Output",
 CellChangeTimes->{{3.8717019511981893`*^9, 3.871701962226606*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"3a5a83c7-632f-46e9-8985-ee1e9e7dc43c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2.", "/", "3."}]], "Input",
 CellChangeTimes->{{3.8717019782856855`*^9, 3.871701980863163*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"ce72273a-d0c9-4be1-a9c4-a45d3f938d09"],

Cell[BoxData["0.6666666666666666`"], "Output",
 CellChangeTimes->{3.871701982440624*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"0a1af0f9-25fb-4bdd-b301-6fa626e3bf33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "/", "3"}]], "Input",
 CellChangeTimes->{{3.8717019965377197`*^9, 3.871701997240943*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"3e89f9be-6d98-4572-b137-024332f73131"],

Cell[BoxData[
 FractionBox["2", "3"]], "Output",
 CellChangeTimes->{3.8717019978569345`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"113ee6e4-cebc-438f-a5f1-1f89e654ee48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "[", 
  RowBox[{"5", ",", "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.8717020049802732`*^9, 3.8717020084016914`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"dfe40a6d-1964-4c14-86a4-150e01e65071"],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{3.8717020094792204`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"ea162e56-2012-41de-8c78-ae4864401b8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subtract", "[", 
  RowBox[{"45", ",", "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.8717020778538437`*^9, 3.8717020829154654`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"4a8e0b00-cb14-4a5c-98d3-630d335038bb"],

Cell[BoxData["38"], "Output",
 CellChangeTimes->{3.871702084149593*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"87b86b10-b6ca-4536-a7e9-1e4ba1682303"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.871701793706007*^9, 
  3.8717017950960927`*^9}},ExpressionUUID->"588d87d3-0f51-4793-9a3c-\
999ffa8b7903"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.871701788019881*^9, 
  3.871701788019881*^9}},ExpressionUUID->"17f939e3-67ee-443d-9167-\
95b09b769099"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"A", "*", "B"}]], "Input",
 CellChangeTimes->{{3.87170177730328*^9, 3.8717017785845604`*^9}, {
  3.871702125708808*^9, 3.8717021317090297`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"4e62794d-5a1d-482c-9d9f-04a8c27ec4c2"],

Cell[BoxData[
 RowBox[{"A", " ", "B"}]], "Output",
 CellChangeTimes->{3.8717021328022127`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"66fc2f7b-42db-4ed9-bde7-4c22537a0295"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.871702185602683*^9, 3.8717021876646767`*^9}},
 NumberMarks->False,ExpressionUUID->"950e75ec-cb9d-409d-9c0b-6b9677c74583"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["A", "2"], " ", "B"}], "2"]], "Output",
 CellChangeTimes->{3.8717021807910843`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"2004d15f-c891-43ba-9705-ecdad4c4a8ed"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"//", 
   RowBox[{
   "MATHEMATICA", " ", "ALLOWS", " ", "BOTH", " ", "NUMERIC", " ", "AND", " ",
     "CONSTANT", " ", 
    RowBox[{"CALCULATION", ".", " ", "IN"}], " ", "MATLAB"}]}], ",", " ", 
  RowBox[{
  "THE", " ", "VARIABLE", " ", "SHOULD", " ", "BE", " ", "DECLARED", " ", 
   "FIRST", " ", "AND", " ", "THEN", " ", 
   RowBox[{"USED", "."}]}]}]], "Input",
 CellChangeTimes->{{3.87170213422373*^9, 
  3.8717021620612946`*^9}},ExpressionUUID->"9952f76f-1834-4d3a-ac45-\
8c709f86b5b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "*", "A"}]], "Input",
 CellChangeTimes->{{3.8717020180868816`*^9, 3.8717020180868816`*^9}, {
  3.871702112611658*^9, 3.8717021217813644`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"cb0dc3ea-c7c6-4a94-8a0a-d8a631edd32e"],

Cell[BoxData[
 RowBox[{"2", " ", "A"}]], "Output",
 CellChangeTimes->{3.8717021225152636`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"90c68995-016d-4617-8485-5aafb2b2ad5c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"//", 
  RowBox[{
  "EVERY", " ", "INPUT", " ", "COMMAND", " ", "IN", " ", "MATHEMATICA", " ", 
   "IS", " ", "INPUT", " ", "USING", " ", "THE", " ", "BRACKTETS", 
   " "}]}]], "Input",
 CellChangeTimes->{{3.871702328596957*^9, 
  3.8717023593084927`*^9}},ExpressionUUID->"c861310a-1582-46d7-a609-\
bf8b2aa80ece"],

Cell[BoxData[
 RowBox[{
  RowBox[{"//", 
   RowBox[{
   "COMMAND", " ", "FUNCTION", " ", "HAS", " ", "FIRST", " ", "LETTER", " ", 
    "CAPITAL", " ", "IN", " ", "ITS", " ", 
    RowBox[{"DEFNITION", "/", "DECLARATION"}]}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8717024212312093`*^9, 
  3.871702451349425*^9}},ExpressionUUID->"0b889494-19f0-4f93-998e-\
0e4ea17c67fc"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve[2x+1==0,x]", Typeset`newq$$ = 
   "Solve[2x+1==0,x]", Typeset`chosen$$ = "Solve[2*x + 1 == 0, x]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Solve[2x+1==0,x]", 
                  Defer[
                   Solve[2 Global`x + 1 == 0, Global`x]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Solve", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "1"}], " ", "==", 
                    " ", "0"}], ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Solve", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "1"}], " ", "==", 
                    " ", "0"}], ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "1"}], " ", "==", 
                    " ", "0"}], ",", " ", "x"}], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Solve[2x+1==0,x]", 
                    Defer[
                    Solve[2 Global`x + 1 == 0, Global`x]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "1"}], " ", "==", 
                    " ", "0"}], ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "1"}], " ", "==", 
                    " ", "0"}], ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "1"}], " ", "==", 
                    " ", "0"}], ",", " ", "x"}], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[32]:=",ExpressionUUID->"3ab090f3-0447-49e6-9b47-80da6ad8659f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", 
     FractionBox["1", "2"]}]}], "}"}], "}"}]], "Input",
 CellChangeTimes->{{3.8717025547315035`*^9, 
  3.8717025581838207`*^9}},ExpressionUUID->"28eb0300-e621-4e71-9d2c-\
1d10131a5712"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve[{2x+3y==0, 3x+4y==0}, {\n {{x, y}]", 
   Typeset`newq$$ = "Solve[{2x+3y==0, 3x+4y==0}, {\n {{x, y}]", 
   Typeset`chosen$$ = "{{2*x + 3*y == 0, 3*x + 4*y == 0}, {{{x, y}}}}", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Solve[{2x+3y==0, 3x+4y==0}, {\n {{x, y}]", 
                  
                  Defer[{{
                    2 Global`x + 3 Global`y == 0, 3 Global`x + 4 Global`y == 
                    0}, {{{Global`x, Global`y}}}}], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", 
                    RowBox[{"3", "*", "y"}]}], " ", "==", " ", "0"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", "*", "x"}], " ", "+", " ", 
                    RowBox[{"4", "*", "y"}]}], " ", "==", " ", "0"}]}], "}"}],
                    ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], "}"}], "}"}]}], "}"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", 
                    RowBox[{"3", "*", "y"}]}], " ", "==", " ", "0"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", "*", "x"}], " ", "+", " ", 
                    RowBox[{"4", "*", "y"}]}], " ", "==", " ", "0"}]}], "}"}],
                    ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], "}"}], "}"}]}], "}"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", 
                    RowBox[{"3", "*", "y"}]}], " ", "==", " ", "0"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", "*", "x"}], " ", "+", " ", 
                    RowBox[{"4", "*", "y"}]}], " ", "==", " ", "0"}]}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], "}"}], "}"}]}], 
                    "}"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Solve[{2x+3y==0, 3x+4y==0}, {\n {{x, y}]", 
                    
                    Defer[{{
                    2 Global`x + 3 Global`y == 0, 3 Global`x + 4 Global`y == 
                    0}, {{{Global`x, Global`y}}}}], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", 
                    RowBox[{"3", "*", "y"}]}], " ", "==", " ", "0"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", "*", "x"}], " ", "+", " ", 
                    RowBox[{"4", "*", "y"}]}], " ", "==", " ", "0"}]}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], "}"}], "}"}]}], "}"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", 
                    RowBox[{"3", "*", "y"}]}], " ", "==", " ", "0"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", "*", "x"}], " ", "+", " ", 
                    RowBox[{"4", "*", "y"}]}], " ", "==", " ", "0"}]}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], "}"}], "}"}]}], "}"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", 
                    RowBox[{"3", "*", "y"}]}], " ", "==", " ", "0"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", "*", "x"}], " ", "+", " ", 
                    RowBox[{"4", "*", "y"}]}], " ", "==", " ", "0"}]}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], "}"}], "}"}]}], 
                    "}"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[36]:=",ExpressionUUID->"bd7e8ec8-e74e-40f9-8bff-6ac4e18033ad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"2", " ", "x"}], "+", 
       RowBox[{"3", " ", "y"}]}], "\[Equal]", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"3", " ", "x"}], "+", 
       RowBox[{"4", " ", "y"}]}], "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8717027779536066`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"ec10cb77-00aa-4b3b-a8f4-1df1e5f0ce1b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SQRT[]         "}]], "Input",
 CellChangeTimes->{{3.871702762502222*^9, 3.8717028020908427`*^9}, {
  3.8717031088392916`*^9, 3.8717031109481916`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"932cb67b-aa4b-4db3-9a30-818fc521d806"],

Cell[BoxData[
 RowBox[{"Missing", "[", 
  RowBox[{"\<\"UnknownSymbol\"\>", ",", "\<\"SQRT[]         \"\>"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.871703111994799*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"379e71c4-e86d-4989-84ca-2938cb736bf5"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717027816558433`*^9, 
  3.871702783483541*^9}},ExpressionUUID->"e30cce16-dc63-4dd7-94f2-\
493abb504d5c"],

Cell["\<\
 ;- FOR COMMENTS (**) SHOWS THE DECIMAL REPRESTATION FOR THE GIVEN EXCEPTion\
\>", "Subitem",
 CellChangeTimes->{{3.871702805605926*^9, 3.8717028503475313`*^9}, {
  3.871703114681476*^9, 
  3.8717031274665327`*^9}},ExpressionUUID->"e59fa658-4b04-4cb6-bdfa-\
a70f1413d3b7"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"=", 
   RowBox[{"n", "[", 
    RowBox[{"PI", ",", "6"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.871702851284486*^9, 3.871702883386656*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[37]:=",ExpressionUUID->"929603d5-3b45-4ab1-8c7c-bed4228acfd1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sqrt", "[", "400", "]"}]], "Input",
 CellChangeTimes->{{3.8717028894161606`*^9, 3.871702911895604*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"01ddb7e5-252b-4491-85e3-a9f892230ee1"],

Cell[BoxData["20"], "Output",
 CellChangeTimes->{{3.8717029018663692`*^9, 3.8717029123795614`*^9}},
 CellLabel->"Out[38]=",ExpressionUUID->"3b5b5db8-7769-4a18-b221-72bafe0f016c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "%%", "]"}]], "Input",
 CellChangeTimes->{{3.8717029193935704`*^9, 3.871702922127614*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"81f8117b-d309-44b3-bd82-ce7d290cf107"],

Cell[BoxData["2.`"], "Output",
 CellChangeTimes->{3.8717029228302135`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"7a411444-1fc4-4559-9435-b5d2f7ae6dd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "&"}], "2"}], ",", " ", 
    RowBox[{"y", "^", "95"}], ",", 
    RowBox[{"3", "+", "12"}]}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.87170314649331*^9, 3.871703178501392*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"360698b6-96b1-4f86-876a-4f09343008a9"],

Cell[BoxData[
 TemplateBox[{
  "General","ivar",
   "\"\\!\\(\\*SuperscriptBox[\\\"y\\\", \\\"95\\\"]\\) is not a valid \
variable.\"",2,41,7,16848562495805431554,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8717031791416435`*^9},
 CellLabel->
  "During evaluation of \
In[41]:=",ExpressionUUID->"9cfd3490-0c51-4e4a-a66a-a7040e0a2913"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", 
   RowBox[{
    SuperscriptBox["y", "95"], ",", "15"}]], 
  RowBox[{"(", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{"y", "&"}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.871703179172849*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"2e7fbd05-91d5-437f-9a56-b0ae539838ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Floor", "[", "2.3", "]"}]], "Input",
 CellChangeTimes->{{3.8717031818910146`*^9, 3.871703185312105*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"5cc5eb3d-e10f-45cf-995d-96cd36b703e9"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.871703186483652*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"ad731390-0a8f-4a29-a8c8-bde18ee55a59"]
}, Closed]],

Cell[BoxData[
 RowBox[{"Ceiling", "[", "5.6", "]"}]], "Input",
 CellChangeTimes->{{3.871703186983906*^9, 3.8717031978719287`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"9d49ecbf-1863-4a17-a73c-109f49842a4e"],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{{3.8717036814818273`*^9, 
  3.871703681497124*^9}},ExpressionUUID->"6841a8cb-a9d6-4322-9ef9-\
4313083e591f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Sin", "[", "30", "]"}], "\[IndentingNewLine]", 
 RowBox[{"//", " ", 
  RowBox[{
  "%%", " ", "sign", " ", "jumps", " ", "to", " ", "the", " ", "number", " ", 
   "of", " ", "given", " ", "to", " ", "amphasend", " ", 
   RowBox[{"{", "&", "}"}], " ", "or", " ", "any", " ", 
   RowBox[{"variable", " ", "/", " ", "number"}], " ", 
   RowBox[{"specified", "."}]}]}]}], "Input",
 CellChangeTimes->{{3.871702925829855*^9, 3.871702979067387*^9}, {
  3.871703261809802*^9, 3.871703288663186*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[45]:=",ExpressionUUID->"46a14888-9986-4345-8d16-7f7d7b8c6a8c"],

Cell[BoxData[
 RowBox[{"Sin", "[", "30", "]"}]], "Output",
 CellChangeTimes->{{3.871703277806052*^9, 3.8717032898500967`*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"d805682f-49cb-418b-862d-349a30827355"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "[Sin[60]]", Typeset`newq$$ = "[Sin[60]]", 
   Typeset`chosen$$ = "Sin[60*Degree]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["[Sin[60]]", 
               Defer[
                Sin[60 Degree]], "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["[Sin[60]]", 
                  Defer[
                   Sin[60 Degree]], "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"60", "*", "Degree"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"60", "*", "Degree"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Sin", "[", 
                    RowBox[{"60", "*", "Degree"}], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["[Sin[60]]", 
                   Defer[
                    Sin[60 Degree]], "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "[Sin[60]]", 
                    Defer[
                    Sin[60 Degree]], "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Sin", "[", 
                    RowBox[{"60", "*", "Degree"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Sin", "[", 
                    RowBox[{"60", "*", "Degree"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Sin", "[", 
                    RowBox[{"60", "*", "Degree"}], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[46]:=",ExpressionUUID->"4f191a95-2d03-49b5-aeee-dc1941c9f1d0"],

Cell[BoxData[
 FractionBox[
  SqrtBox["3"], "2"]], "Output",
 CellChangeTimes->{3.871703304065528*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"148923bc-116f-4de4-b7be-22c1c0883a71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{"tan", "[", "45", "]"}], "]"}], "\[AliasDelimiter]"}]], "Input",
 CellChangeTimes->{{3.8717033070336075`*^9, 3.871703321311798*^9}, 
   3.8717035914556885`*^9},ExpressionUUID->"efde6f9c-265b-4bf2-9ac3-\
c36fe477b964"],

Cell[BoxData[
 RowBox[{"tan", "[", "45.`", "]"}]], "Output",
 CellChangeTimes->{{3.8717033119699*^9, 3.8717033221706676`*^9}},
 CellLabel->"Out[48]=",ExpressionUUID->"0c2ca64e-b450-4a98-849d-35da94403216"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717036833404627`*^9, 
  3.871703686288826*^9}},ExpressionUUID->"aeb784d8-74c7-40fa-ba6f-\
80bfd44cce3d"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "tan[45]", Typeset`newq$$ = "tan[45]", 
   Typeset`chosen$$ = "Tan[45*Degree]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["tan[45]", 
               Defer[
                Tan[45 Degree]], "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{14., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["tan[45]", 
                  Defer[
                   Tan[45 Degree]], "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Tan", "[", 
                  RowBox[{"45", "*", "Degree"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Tan", "[", 
                  RowBox[{"45", "*", "Degree"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Tan", "[", 
                    RowBox[{"45", "*", "Degree"}], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["tan[45]", 
                   Defer[
                    Tan[45 Degree]], "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["tan[45]", 
                    Defer[
                    Tan[45 Degree]], "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Tan", "[", 
                    RowBox[{"45", "*", "Degree"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Tan", "[", 
                    RowBox[{"45", "*", "Degree"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Tan", "[", 
                    RowBox[{"45", "*", "Degree"}], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[50]:=",ExpressionUUID->"7e571b6f-84ff-4795-92c9-68e9a167c896"],

Cell[BoxData[
 RowBox[{"1", "\[AliasDelimiter]"}]], "Input",
 CellChangeTimes->{{3.871704422972457*^9, 
  3.871704422987712*^9}},ExpressionUUID->"7293411f-f134-4fd4-b3a8-\
368ef0fef1d5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"num", "=", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "3", ",", "A", ",", "B", ",", "C", ",", " ", "D"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.8717033513534517`*^9, 3.8717033798250875`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"66bac31e-4ec8-4ce0-9532-617db309cc00"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "A", ",", "B", ",", "C", ",", "D"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8717033805749063`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"741c7f75-ee74-4a8c-9b9c-9d421196931b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "num", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[52]:=",ExpressionUUID->"b5d82f96-e38b-4066-9698-e10fb83bdefb"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{3.8717035930646863`*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"aba972c4-c90e-4749-8a6b-fdae615eac2e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"//", 
  RowBox[{"MatrixForm", " ", ":", " ", 
   RowBox[{
   "used", " ", "to", " ", "print", " ", "a", " ", "given", " ", "2", "d", 
    " ", "array", " ", "into", " ", "proper", " ", "matrix", " ", 
    "form"}]}]}]], "Input",
 CellChangeTimes->{{3.8717038498515244`*^9, 
  3.871703868191228*^9}},ExpressionUUID->"f87ac65b-56b9-46a6-b202-\
9619bb44fbd3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"m", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "6", ",", "4"}], "}"}]}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"m", "     "}]}], "Input",
 CellChangeTimes->{{3.871703602016078*^9, 
  3.871703654362873*^9}},ExpressionUUID->"bcd49a93-a8ff-4d9d-9aae-\
63c6c8405da1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8717036190742273`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"cc0b8d04-44cc-480d-a93b-9c22d9e5250f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8717036190742273`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"fcdd8d7e-3f59-44b2-b0ce-69dffaef621d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"m", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8717036575030394`*^9, 3.8717036715463247`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"5ec7d6b2-22e9-4969-bab7-9c58f5de519f"],

Cell[CellGroupData[{

Cell[BoxData["a"], "Input",
 CellChangeTimes->{
  3.8717044320796328`*^9},ExpressionUUID->"0ae05ead-580b-4fe2-a350-\
113a1c494583"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"2", "6", "4"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8717036728897605`*^9},
 CellLabel->
  "Out[55]//MatrixForm=",ExpressionUUID->"aeeb3a86-9bbb-4d47-9170-\
7091d9aa8e7a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"/.", " ", 
  RowBox[{"REPLACEMENT", " ", "OPERATOR"}]}]], "Input",
 CellChangeTimes->{{3.871703740715019*^9, 
  3.871703754961686*^9}},ExpressionUUID->"64a27a3e-044d-42a7-8d98-\
e2c7d1028704"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"X", "+", "Y", "+", "4"}]], "Input",
 CellChangeTimes->{{3.871703764069213*^9, 3.8717037680992393`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"ce3c2179-6cc8-4671-8d9f-963d79d50469"],

Cell[BoxData[
 RowBox[{"4", "+", "X", "+", "Y"}]], "Output",
 CellChangeTimes->{3.871703769427024*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"75e6266f-0795-4f70-b63b-0c946f170ccf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "+", "y", "+", "4"}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", "4"}], " ", ",", " ", 
    RowBox[{"y", "\[Rule]", "7"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8717037716452637`*^9, 3.8717037883292584`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"e599f685-c648-47db-be88-cdf2d673545b"],

Cell[BoxData["15"], "Output",
 CellChangeTimes->{3.871703789516056*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"e453880c-db30-47ea-9ad0-3175f05916e2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MATHEMATICA", " ", "::", " ", "FASTER"}], " ", "ANSWERS"}], ",", 
  " ", 
  RowBox[{
  "ACCURATE", " ", "ANSWERS", " ", "AND", " ", "CHANGE", " ", "THE", " ", 
   "DESIRED", " ", "PRECISION", " ", "FOR", " ", "A", " ", "SOLUTION", " ", 
   "OF", " ", "THE", " ", "QUESTION"}]}]], "Input",
 CellChangeTimes->{{3.871703942720764*^9, 
  3.871703972291854*^9}},ExpressionUUID->"6f2822b3-a8c7-4c40-a1a0-\
b1d20345d0c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DEFINING", " ", "FUNCTIONS"}], " ", "\[Rule]", " ", 
   RowBox[{"f", "[", "x_", "]"}]}], ":=", 
  RowBox[{
   RowBox[{"x", "^", "2"}], "     ", "where", " ", "f", " ", "is", " ", "the",
    " ", "name", " ", "of", " ", "the", " ", 
   RowBox[{"function", "."}]}]}]], "Input",
 CellChangeTimes->{{3.8717039807583923`*^9, 3.871704029372017*^9}, {
  3.8717040942789965`*^9, 
  3.8717041051471767`*^9}},ExpressionUUID->"0f2cc416-da7e-4553-8f0b-\
3359f080ff7b"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.871704108083988*^9, 3.871704112020854*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"8e1863c4-5edc-4ace-a46c-a889b43f8154"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "3"}]}]], "Input",
 CellChangeTimes->{{3.8717041158636603`*^9, 3.8717041368655205`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"02dc1f57-0777-43b8-ba1d-a4e287cb4d7b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"z", "=", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"4", "x"}], "+", 
    RowBox[{"2", 
     RowBox[{"x", "^", "3"}]}], "+", 
    RowBox[{"4", "*", 
     RowBox[{"x", "^", "2"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.871704142301486*^9, 3.871704180511531*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"bc125edc-1d00-471a-ab98-2f68d229db86"],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   RowBox[{
    RowBox[{"4", " ", "x"}], "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", "3"]}]}], ")"}], "3"]], "Output",
 CellChangeTimes->{{3.871704159375897*^9, 3.8717041819640465`*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"3013bbd8-5b95-4182-8606-d28b80d5b670"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "z", "]"}]], "Input",
 CellChangeTimes->{{3.8717041858069067`*^9, 3.871704209598507*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"54047ee6-686d-44d7-81d2-ef38746de702"],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   RowBox[{
    RowBox[{"4.`", " ", "x"}], "+", 
    RowBox[{"4.`", " ", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"2.`", " ", 
     SuperscriptBox["x", "3"]}]}], ")"}], "3"]], "Output",
 CellChangeTimes->{{3.8717041952421675`*^9, 3.87170421072295*^9}},
 CellLabel->"Out[63]=",ExpressionUUID->"99ea3291-de20-438b-8295-6ee23ed24fad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"4.`", " ", "x"}], "+", 
     RowBox[{"4.`", " ", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"2.`", " ", 
      SuperscriptBox["x", "3"]}]}], ")"}], "3"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[76]:=",ExpressionUUID->"89d2453a-c04e-46df-83f6-5c85eac51ad4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"64.`", " ", 
   SuperscriptBox["x", "3"]}], "+", 
  RowBox[{"192.`", " ", 
   SuperscriptBox["x", "4"]}], "+", 
  RowBox[{"288.`", " ", 
   SuperscriptBox["x", "5"]}], "+", 
  RowBox[{"256.`", " ", 
   SuperscriptBox["x", "6"]}], "+", 
  RowBox[{"144.`", " ", 
   SuperscriptBox["x", "7"]}], "+", 
  RowBox[{"48.`", " ", 
   SuperscriptBox["x", "8"]}], "+", 
  RowBox[{"8.`", " ", 
   SuperscriptBox["x", "9"]}]}]], "Output",
 CellChangeTimes->{3.87170441878557*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"0cf99ac7-5765-42ef-9132-fc22de7a40e4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Expand", "[", "]"}], " ", "simplifies", " ", "the", " ", "whole", 
  " ", "polynomial", " ", "equation"}]], "Input",
 CellChangeTimes->{{3.8717042308435717`*^9, 
  3.8717042502764997`*^9}},ExpressionUUID->"7a3e9a16-7359-4e8a-b4df-\
6f3c7a5152f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", "z", "]"}]], "Input",
 CellChangeTimes->{{3.8717042170808372`*^9, 3.8717042226891937`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"1a40c522-7c03-451f-93e5-5bcea255d9f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"64", " ", 
   SuperscriptBox["x", "3"]}], "+", 
  RowBox[{"192", " ", 
   SuperscriptBox["x", "4"]}], "+", 
  RowBox[{"288", " ", 
   SuperscriptBox["x", "5"]}], "+", 
  RowBox[{"256", " ", 
   SuperscriptBox["x", "6"]}], "+", 
  RowBox[{"144", " ", 
   SuperscriptBox["x", "7"]}], "+", 
  RowBox[{"48", " ", 
   SuperscriptBox["x", "8"]}], "+", 
  RowBox[{"8", " ", 
   SuperscriptBox["x", "9"]}]}]], "Output",
 CellChangeTimes->{3.8717042232668924`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"bb12ac49-6070-4d84-8fb8-a959604b69a8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ClearAll", " ", ":", " ", 
  RowBox[{
  "clears", " ", "all", " ", "the", " ", "values", " ", "stored", " ", "in", 
   " ", "the", " ", "created", " ", "Variables"}]}]], "Input",
 CellChangeTimes->{{3.8717042559158025`*^9, 
  3.871704269037402*^9}},ExpressionUUID->"5c619c3c-7b26-4a42-885d-\
026197a52f98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{"z", ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8717042786914463`*^9, 
  3.871704323649658*^9}},ExpressionUUID->"5c3f1ea2-4da8-487f-a149-\
9992e417a78a"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
pk92k2sR3cBuT4ZVFfL0jjGfU6tF97oDiJ/iVaI1DVIh9B1D1Kqq1OT3ylDq
6J/PS29rkHPRrJ+hfREa8bwc/02kBv3cH/Dzny9EZExK+doz1egn7zv9AZNC
9NIko7ccVCMm2k/lc48KkOIfmysfDytRVFPKjtTQD+QeEMstl1mJLv4oCctb
ykU/uNqltvQqUY/qI27DM7noig2/ocHPChTdfklETTobLa6tJ/A6lCOrIaHX
jFPpiCGYuXCCqRzt/2h/PU2VjrSEtX+FdpQhql3XoCrVNFT2ovDPIW8Zosh0
2EtpSkEf9p152/6UII2zdHEF64moJjr1pvfXEiRjTjWSeDsRbUkPqoncLkEF
il6XvWMTkIGXxPPYhJ/oKQ8usDv3O+I9e1hk+6gYtRqYi/vtRaPHybwN10iK
kVvdkHTnWBQKVXg02FdWhLKNTaret0Siw4Cq/ZuXi9DvWsdR8vJwJMD9l3ij
vhDhDC/pVFd+RWYtjFdTXhSi6fe5O7ENYajtgrfsxZ4C1H3XjzprLQSdyc3T
wLwLUIn2XZFS0hAkqjFl7CxQgNIudPzKFwlGccHyvmOB+YgiLvU34P6MfvMS
Bel//oEG5Ggcsu6+Q9DuaX7tci7qlU/TMt7yRxl5rb08yrnIwvGzckH6W/RK
9POVw7M5KGZ9INpLwhfNvFyTMjPJRiL4twS+X3qDVMo1DVursxDcOQjXWvdG
9HKUiTFumWjkS7Piyw4P5Ovz4tfZwQwkee3aSv3EK7RS1//HRiQDEbz7sG5C
4IaqlCJ5b66lIbuneDl/IpwR+8d9teT/5pIjFBV/dOKEPrXrP7+QmYq2mHyN
yz0ckZE2Q/HokxQUPGJDPmVmh1ZxO1Iu9cmI111BOWjSBnlGdCEyjmR0zfcS
YaCPNboolXknwz8JjVv8vbirYIniRn3b5OcTUSH97Usr180R32tD7VHFRGQd
5lb6RtQMVTKLDzmnJ6AtuvdvO4xMUHFbb4Nmz3d0IC2V4MFogPopAnp8Q7+h
/iLs1yK3HsLdlxr/eS8O2c0+0iOy10WUsauLi9Sx6JVA7d7gsja6MRW/fXUw
GhVf3CcOkdZE2hz3zmhGRqG3klJ0wQSqyMGG4KLvw0i0nuNn9VxMCQXnlV/5
SReBePIO5afrbqO87WdsiyNfUWAXa7t/FkSdUsyCV+PCEDlgTRvouonWXvdJ
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
Bz1o6+H/AAGpYLc=
       "]]},
     Annotation[#, "Charting`Private`Tag$27909#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 2}, {-511.99981191840055`, 10288.967497370555`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8717042976713576`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"7fd49b02-4cda-469c-a2ba-566e9649f22a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", "m_", "]"}], ":=", 
  RowBox[{"m", "^", "3"}]}], "\[IndentingNewLine]", 
 RowBox[{"mm", "=", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"2", 
     RowBox[{"x", "^", "2"}]}], "-", 
    RowBox[{"3", "x"}], "+", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"mm", ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "50"}], ",", "50"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.871704328461313*^9, 3.8717044001652336`*^9}, {
  3.871704986379961*^9, 3.8717049956490345`*^9}, {3.871705048433443*^9, 
  3.8717050546192536`*^9}, {3.8717051087318363`*^9, 3.8717051134495215`*^9}, {
  3.8717051496438913`*^9, 3.8717051515340295`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"f6e83d4b-db56-45b1-ad6f-a4d33e15a37b"],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   RowBox[{"5", "-", 
    RowBox[{"3", " ", "x"}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", "2"]}]}], ")"}], "3"]], "Output",
 CellChangeTimes->{{3.8717050140037355`*^9, 3.871705020189782*^9}, 
   3.871705057197064*^9, {3.871705114855139*^9, 3.8717051525494385`*^9}},
 CellLabel->"Out[26]=",ExpressionUUID->"952d2cc2-03b3-46d0-8889-c8e830f025e3"],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-50, 50}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8717050140037355`*^9, 3.871705020189782*^9}, 
   3.871705057197064*^9, {3.871705114855139*^9, 3.8717051525963*^9}},
 CellLabel->"Out[27]=",ExpressionUUID->"5a511893-dbbb-47f7-98aa-e92d78a6c526"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.871705118916963*^9, 3.871705118932315*^9}, {
  3.8717051588917193`*^9, 
  3.8717051596730795`*^9}},ExpressionUUID->"e07e51d3-9d3e-4de2-95c3-\
6490d805b969"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717050294845123`*^9, 
  3.871705029500105*^9}},ExpressionUUID->"61f9ba2e-a9b3-444e-8fe3-\
6744a818445f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717050094582233`*^9, 
  3.8717050103171105`*^9}},ExpressionUUID->"0e72b327-e8a8-4f62-847c-\
652cb45367cd"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.871705025735693*^9, 
  3.871705025750982*^9}},ExpressionUUID->"b2f43029-e2d3-48c4-a9cb-\
04f4b23e63f8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717041743564625`*^9, 3.871704175981386*^9}, 
   3.8717042138163633`*^9},ExpressionUUID->"fd7ee173-e615-4e69-9ecd-\
8d4e6e06b5bf"],

Cell[CellGroupData[{

Cell["SUM(23+34)", "WolframAlphaLong",
 CellChangeTimes->{{3.871700388156511*^9, 3.8717003988099413`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"923150e7-85cd-4862-8843-e050a4f4e024"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "SUM(23+34)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"23 + 34"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"23", "+", "34"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Simplification", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["57", HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{
                GrayLevel[0.5], 
                PointSize[Medium], 
                PointBox[{{0, 0}, {23, 0}}]}, 
               StyleBox[
                InsetBox[
                 FormBox[
                  StyleBox[
                   TagBox["23", #& ], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   Rational[23, 2], 5.2018200000000006`}, {11.5, 
                  5.2018200000000006`}]], 12, StripOnInput -> False], {
                RGBColor[0.24720000000000014`, 0.24, 0.6], 
                AbsoluteThickness[1], 
                ArrowBox[
                 BezierCurveBox[
                  NCache[{{0, 0}, {
                    Rational[23, 2], 8.0028}, {23, 0}}, {{0, 0}, {11.5, 
                    8.0028}, {23, 0}}]]]}}, {{
                RGBColor[1, 0, 0], 
                PointSize[Large], 
                PointBox[{57, 0}]}, 
               StyleBox[
                InsetBox[
                 FormBox[
                  StyleBox[
                   TagBox["34", #& ], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], {40, 5.2018200000000006`}], 12, 
                StripOnInput -> False], {
                RGBColor[0.24720000000000014`, 0.24, 0.6], 
                AbsoluteThickness[1], 
                ArrowBox[
                 BezierCurveBox[{{23, 0}, {40, 8.0028}, {57, 0}}]]}}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Axes -> {True, False}, 
              PlotRange -> {{-2.8500000000000014`, 59.85}, Automatic}, Ticks -> 
              Automatic, ImageSize -> {330., Automatic}, AxesStyle -> {}, 
              PlotRangePadding -> {
                Scaled[0.05], 0}, AxesOrigin -> {0, 0}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Number name", "scanner" -> "Integer", "id" -> 
     "NumberName", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"IntegerName[57, \"Words\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"fifty\[Hyphen]seven\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Manipulatives illustration", "scanner" -> "Arithmetic",
      "id" -> "Illustration", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, -1.8}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {0, -1.8}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, -0.30000000000000004`}]},
                    PlotRange -> {{-2, 1.7}, {-2.15, 8.4}}, ImageSize -> 22.4,
                    BaselinePosition -> Bottom]}, "Row", 
                 DisplayFunction -> (FrameBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], 
                   FrameMargins -> 0, FrameStyle -> {
                    Directive[
                    GrayLevel[0.85]], 
                    Directive[
                    Thickness[Small]]}]& ), InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "Frame", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "True"}], ",", 
                    RowBox[{
                    StyleBox[
                    "FrameStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    StyleBox[
                    "Directive", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.85], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.5666666666666667], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.85`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.85], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{
                    StyleBox[
                    "Directive", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    StyleBox[
                    "Thickness", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    StyleBox[
                    "Small", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "]"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    StyleBox[
                    "FrameMargins", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "0"}], ",", 
                    RowBox[{
                    StyleBox[
                    "ImageMargins", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "0"}]}], 
                    "]"}]& )], "\"+\"", 
                TemplateBox[{
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, -1.8}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {0, -1.8}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, -0.30000000000000004`}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {0, -0.30000000000000004`}]}, 
                   PlotRange -> {{-2, 1.7}, {-2.15, 8.4}}, ImageSize -> 22.4, 
                   BaselinePosition -> Bottom]}, "Row", 
                 DisplayFunction -> (FrameBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], 
                   FrameMargins -> 0, FrameStyle -> {
                    Directive[
                    GrayLevel[0.85]], 
                    Directive[
                    Thickness[Small]]}]& ), InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "Frame", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "True"}], ",", 
                    RowBox[{
                    StyleBox[
                    "FrameStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    StyleBox[
                    "Directive", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.85], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.5666666666666667], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.85`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.85], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{
                    StyleBox[
                    "Directive", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    StyleBox[
                    "Thickness", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    StyleBox[
                    "Small", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "]"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    StyleBox[
                    "FrameMargins", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "0"}], ",", 
                    RowBox[{
                    StyleBox[
                    "ImageMargins", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "0"}]}], 
                    "]"}]& )], "\"\[LongEqual]\"", 
                TemplateBox[{
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    RGBColor[0.47, 0.61, 0.86], 
                    RectangleBox[{0, 0}, {1, 10}], 
                    RGBColor[0.14, 0.3, 0.56], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 2}, {1, 
                    2}}, {{0, 3}, {1, 3}}, {{0, 4}, {1, 4}}, {{0, 5}, {1, 
                    5}}, {{0, 6}, {1, 6}}, {{0, 7}, {1, 7}}, {{0, 8}, {1, 
                    8}}, {{0, 9}, {1, 9}}, {{0, 10}, {1, 10}}, {{0, 0}, {0, 
                    10}}, {{1, 0}, {1, 10}}}]}, ImagePadding -> 0, 
                   BaselinePosition -> Bottom, ImageMargins -> 2.1, ImageSize -> 
                   7.], 
                  GraphicsBox[{
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, -1.8}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {0, -1.8}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, -0.30000000000000004`}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {0, -0.30000000000000004`}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, 1.2}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {0, 1.2}], 
                    GeometricTransformationBox[{
                    RGBColor[0.43, 0.63, 0.1], 
                    RectangleBox[{0, 0}, {1, 1}], 
                    RGBColor[0.14, 0.43, 0.24], 
                    Thickness[Small], 
                    
                    LineBox[{{{0, 0}, {1, 0}}, {{0, 1}, {1, 1}}, {{0, 0}, {0, 
                    1}}, {{1, 0}, {1, 1}}}]}, {-1.5, 2.7}]}, 
                   PlotRange -> {{-2, 1.7}, {-2.15, 8.4}}, ImageSize -> 22.4, 
                   BaselinePosition -> Bottom]}, "Row", 
                 DisplayFunction -> (FrameBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], 
                   FrameMargins -> 0, FrameStyle -> {
                    Directive[
                    GrayLevel[0.85]], 
                    Directive[
                    Thickness[Small]]}]& ), InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "Frame", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "True"}], ",", 
                    RowBox[{
                    StyleBox[
                    "FrameStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    StyleBox[
                    "Directive", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.85], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.5666666666666667], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.85`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.85], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{
                    StyleBox[
                    "Directive", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    StyleBox[
                    "Thickness", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    StyleBox[
                    "Small", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "]"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    StyleBox[
                    "FrameMargins", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "0"}], ",", 
                    RowBox[{
                    StyleBox[
                    "ImageMargins", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "0"}]}], 
                    "]"}]& )]}, {
                StyleBox["23", {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}], "\"\"", 
                StyleBox["34", {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}], "\"\"", 
                StyleBox["57", {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, AutoDelete -> False, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}], 
             "Grid"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "SUM", "template" -> 
        "Assuming \"SUM\" is a word${separator}Use as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"SUM\"} -> {\"EnglishWord\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "EnglishWord", "desc" -> "a word", "input" -> 
          "{\"C\", \"SUM\"} -> {\"EnglishWord\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "SumWord", "desc" -> "a sum", "input" -> 
          "{\"C\", \"SUM\"} -> {\"SumWord\"}"}, {}]}]}]}, Typeset`initdone$$ =
    FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "Math", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.455", "parsetiming" -> "0.14300000000000002", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP204623ideh9g6cgiif4a000027411d820c4h786f", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa204723ideh9g6cgiif4a000043661cfcb1d11dh73629183885576317489", "version" -> 
    "2.6", "inputstring" -> "SUM(23+34)"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 5.5, 
    "Date" -> {2022, 9, 9, 13, 59, 27.7151751`9.195292542256192}, "Line" -> 1,
     "SessionID" -> 16848562495805431554}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "SUM(23+34)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1836., {316., 324.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.871700967777294*^9},ExpressionUUID->"b37deb6a-5797-48d4-926b-\
057255a00c0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2300/23+234-23", "WolframAlphaLong",
 CellChangeTimes->{{3.871700522109479*^9, 3.8717005430106316`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"f8eb523a-0db3-4cef-a5d5-3033736d1424"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "2300/23+234-23", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"2300/23 + 234 - 23"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["2300", "23"], "+", "234", "-", "23"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Rational", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["311", Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[311]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{311., 5.598000000000001}]}, "311"], 
                 Annotation[#, 311., "Tooltip"]& ]}, ImageSize -> 330., 
               Axes -> {True, False}, 
               PlotRange -> {{217.7, 404.3}, Automatic}, 
               AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Number name", "scanner" -> "Integer", "id" -> 
     "NumberName", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"IntegerName[311, \"Words\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"three hundred eleven\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "Math", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.383", "parsetiming" -> "0.133", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP551111eee588588e92i60000565fia3cd2b67d6b", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa551211eee588588e92i6000033e67dg8c7if87i96430556393126808734", "version" -> 
    "2.6", "inputstring" -> "2300/23+234-23"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 5.5, 
    "Date" -> {2022, 9, 9, 13, 59, 33.9165139`9.28298610618549}, "Line" -> 2, 
    "SessionID" -> 16848562495805431554}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "2300/23+234-23"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1836., {202., 210.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.871700973916514*^9},ExpressionUUID->"a31abd45-9a2f-4d88-a88d-\
4866b40f7eb2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["23.433-22*23/23", "WolframAlphaLong",
 CellChangeTimes->{{3.8717006496491537`*^9, 3.871700706924547*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"359c6f42-593e-4cfc-b3ad-3fe23c057494"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "23.433-22*23/23", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"23.433 - 22 (23/23)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"23.4329999999999998295`5.3697278925253284", "-", 
               RowBox[{"22", 
                 StyleBox["\[Times]", 
                  GrayLevel[0.6]], 
                 TagBox[
                  FractionBox["23", "23"], 
                  PolynomialForm[#, TraditionalOrder -> False]& ]}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Numeric", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             InterpretationBox["\"1.433\"", 1.433, AutoDelete -> True], 
             DecimalForm[#, NumberPoint -> "."]& ], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[1.433]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{1.433, 0.025794000000000008`}]}, "1.433`"], 
                 Annotation[#, 1.433, "Tooltip"]& ]}, ImageSize -> 330., 
               Axes -> {True, False}, 
               PlotRange -> {{1.0030999999999999`, 1.8629000000000002`}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Rational form", "scanner" -> "Numeric", "id" -> 
     "RationalApproximation", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Rationalize[1.433]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              FractionBox["1433", "1000"], "\" = \"", "1", "\" + \"", 
              FractionBox["433", "1000"]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Number name", "scanner" -> "Numeric", "id" -> 
     "NumberName", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"one point four three three\"", TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "Math", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.33", "parsetiming" -> "0.14400000000000002", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP5691hfhdiagi7fb9d4100004gbdbdf6ded1e72f", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "12", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5701hfhdiagi7fb9d410000125706aga265cb30822558548030476863", "version" -> 
    "2.6", "inputstring" -> "23.433-22*23/23"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 5.5, 
    "Date" -> {2022, 9, 9, 13, 59, 35.6348343`9.304449637388865}, "Line" -> 3,
     "SessionID" -> 16848562495805431554}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "23.433-22*23/23"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1836., {249., 257.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8717009756504817`*^9},ExpressionUUID->"3962c58e-2d18-4247-b491-\
dc374a851f2c"]
}, Open  ]],

Cell["", "WolframAlphaLong",ExpressionUUID->"93a09da9-7506-410e-9d7f-d5101054700d"],

Cell[BoxData[
 GraphicsBox[{},
  ContentSelectable->True,
  ImageSize->{480, 360},
  PlotRange->{{0, 480/360}, {0, 1}}]], "Input",ExpressionUUID->"3ee7031e-11c8-\
4e3f-af47-4ffd2f248d34"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717008184403906`*^9, 
  3.8717008234704247`*^9}},ExpressionUUID->"d1c2cb6a-6eed-4518-a3a1-\
08d4ca29a84c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "Title",
 CellChangeTimes->{{3.8717007563237295`*^9, 
  3.871700768636587*^9}},ExpressionUUID->"3c90e118-e580-4372-bb99-\
8de68faecfed"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717006044417286`*^9, 
  3.871700604444723*^9}},ExpressionUUID->"88f729a1-ea2f-4465-8cf9-\
7d3afcd05f7d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.87170059686061*^9},ExpressionUUID->"48b59395-de8d-475f-aa9d-b2ee3f7bc48d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717005954627647`*^9, 
  3.871700597900709*^9}},ExpressionUUID->"0d94d09d-3bdd-40b1-b2c8-\
9ead15262269"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.871700593637512*^9},
 NumberMarks->False,ExpressionUUID->"14af6693-67b3-4a1e-9bf4-9bdc4f39eab5"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717005921164665`*^9, 
  3.8717005921474133`*^9}},ExpressionUUID->"827d46da-b2a9-47be-8d80-\
c589c5a7aa03"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.8717005905651755`*^9},
 NumberMarks->False,ExpressionUUID->"cf8e71e8-65e7-4c45-9021-c7c7ffe3d5a3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.871700589332489*^9},
 NumberMarks->False,ExpressionUUID->"ae467f54-8ad6-4467-91d9-ade57c2e3ae1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.871700586717849*^9, 
  3.8717005867488194`*^9}},ExpressionUUID->"7381debf-c2f0-4e42-a58a-\
7f2dbaee54ae"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.871700585526281*^9},
 NumberMarks->False,ExpressionUUID->"70a156ed-41a9-4974-a276-3674359ca2ad"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8717005822312365`*^9, 
  3.8717005831884174`*^9}},ExpressionUUID->"d110c1cf-abca-416f-8d5e-\
469698ff8052"]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
Magnification->1.25,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 239, 4, 43, "Text",ExpressionUUID->"609d4fbe-85cf-4718-9798-1eef58193793"],
Cell[CellGroupData[{
Cell[822, 28, 153, 3, 121, "Title",ExpressionUUID->"9f2d0c4c-81c2-4b8f-9705-856db65a87e5"],
Cell[978, 33, 193, 4, 43, "Text",ExpressionUUID->"c2a55559-47a0-47fa-8c1a-d508d5185333"],
Cell[CellGroupData[{
Cell[1196, 41, 233, 4, 60, "Input",ExpressionUUID->"6bcf72db-6590-4c6a-9356-d314771d7319"],
Cell[1432, 47, 150, 2, 40, "Output",ExpressionUUID->"c0244d9d-96bd-4913-a599-4b1fe5e07ae4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1619, 54, 231, 4, 60, "Input",ExpressionUUID->"2e31ae98-9a69-4756-bd8e-7401201866f5"],
Cell[1853, 60, 176, 2, 40, "Output",ExpressionUUID->"c9861060-f770-4892-8841-a1faa09b78f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2066, 67, 233, 4, 60, "Input",ExpressionUUID->"dd71fe23-5ef0-4dbc-90c7-cd47d33483a5"],
Cell[2302, 73, 150, 2, 40, "Output",ExpressionUUID->"79f1f6c1-7c91-4e6c-ae62-ef0ec541cd1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2489, 80, 198, 3, 35, "Input",ExpressionUUID->"4b3b29cb-e6c4-413e-b9d3-4fcee8f21975"],
Cell[2690, 85, 171, 3, 57, "Output",ExpressionUUID->"b003f3bd-5f02-49fb-8b55-016295ddc0f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2898, 93, 194, 3, 35, "Input",ExpressionUUID->"be67a97c-a1d0-4911-aa30-93110318b560"],
Cell[3095, 98, 150, 2, 40, "Output",ExpressionUUID->"b5370e2a-2d6a-46b3-b4e3-0824b7305b52"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3282, 105, 200, 3, 35, "Input",ExpressionUUID->"73fc1bb8-af1b-4711-9956-1c46ea433ce7"],
Cell[3485, 110, 151, 2, 40, "Output",ExpressionUUID->"863d0d1a-6528-471b-9237-8b98661288eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3673, 117, 249, 4, 35, "Input",ExpressionUUID->"6d3197a7-e937-47b0-95ef-95981098d1ee"],
Cell[3925, 123, 149, 2, 40, "Output",ExpressionUUID->"ad269c0f-9ff0-4553-b916-0e1e449530af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4111, 130, 221, 4, 35, "Input",ExpressionUUID->"30f971ff-d8ea-45b0-89b6-55902dfafe3d"],
Cell[4335, 136, 361, 9, 29, "Message",ExpressionUUID->"b0081ea8-da73-4ec5-888f-19bfcdee09be"],
Cell[4699, 147, 436, 11, 29, "Message",ExpressionUUID->"9527e3e9-7aa8-4419-9539-d36cafb22d8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5172, 163, 198, 3, 35, "Input",ExpressionUUID->"0c64c679-06b1-446f-8bb4-ee452b1706ef"],
Cell[5373, 168, 177, 3, 40, "Output",ExpressionUUID->"393d8bd6-4e93-47b9-b741-830c7ca53685"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5587, 176, 211, 5, 35, "Input",ExpressionUUID->"a8aa67ef-60ed-45c3-a46b-f41fdb7cb1be"],
Cell[5801, 183, 205, 4, 40, "Output",ExpressionUUID->"49dab5b9-b87a-4057-b77a-ff331947c5e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6043, 192, 318, 6, 60, "Input",ExpressionUUID->"c79a9005-dd19-4eb4-9c70-a3116cacb59f"],
Cell[6364, 200, 149, 2, 40, "Output",ExpressionUUID->"6065c5ac-1dbb-4d40-a41a-4b96740ecbef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6550, 207, 202, 3, 35, "Input",ExpressionUUID->"3f4dd674-1dbf-415a-a817-c15cd63c6997"],
Cell[6755, 212, 178, 2, 40, "Output",ExpressionUUID->"3a5a83c7-632f-46e9-8985-ee1e9e7dc43c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6970, 219, 198, 3, 35, "Input",ExpressionUUID->"ce72273a-d0c9-4be1-a9c4-a45d3f938d09"],
Cell[7171, 224, 167, 2, 40, "Output",ExpressionUUID->"0a1af0f9-25fb-4bdd-b301-6fa626e3bf33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7375, 231, 196, 3, 35, "Input",ExpressionUUID->"3e89f9be-6d98-4572-b137-024332f73131"],
Cell[7574, 236, 171, 3, 57, "Output",ExpressionUUID->"113ee6e4-cebc-438f-a5f1-1f89e654ee48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7782, 244, 229, 4, 35, "Input",ExpressionUUID->"dfe40a6d-1964-4c14-86a4-150e01e65071"],
Cell[8014, 250, 152, 2, 40, "Output",ExpressionUUID->"ea162e56-2012-41de-8c78-ae4864401b8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8203, 257, 234, 4, 35, "Input",ExpressionUUID->"4a8e0b00-cb14-4a5c-98d3-630d335038bb"],
Cell[8440, 263, 150, 2, 40, "Output",ExpressionUUID->"87b86b10-b6ca-4536-a7e9-1e4ba1682303"]
}, Open  ]],
Cell[8605, 268, 154, 3, 35, "Input",ExpressionUUID->"588d87d3-0f51-4793-9a3c-999ffa8b7903"],
Cell[8762, 273, 152, 3, 35, "Input",ExpressionUUID->"17f939e3-67ee-443d-9167-95b09b769099"],
Cell[CellGroupData[{
Cell[8939, 280, 246, 4, 35, "Input",ExpressionUUID->"4e62794d-5a1d-482c-9d9f-04a8c27ec4c2"],
Cell[9188, 286, 173, 3, 40, "Output",ExpressionUUID->"66fc2f7b-42db-4ed9-bde7-4c22537a0295"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9398, 294, 170, 2, 35, "Input",ExpressionUUID->"950e75ec-cb9d-409d-9c0b-6b9677c74583"],
Cell[9571, 298, 219, 5, 61, "Output",ExpressionUUID->"2004d15f-c891-43ba-9705-ecdad4c4a8ed"]
}, Open  ]],
Cell[9805, 306, 525, 13, 35, "Input",ExpressionUUID->"9952f76f-1834-4d3a-ac45-8c709f86b5b3"],
Cell[CellGroupData[{
Cell[10355, 323, 249, 4, 35, "Input",ExpressionUUID->"cb0dc3ea-c7c6-4a94-8a0a-d8a631edd32e"],
Cell[10607, 329, 173, 3, 40, "Output",ExpressionUUID->"90c68995-016d-4617-8485-5aafb2b2ad5c"]
}, Open  ]],
Cell[10795, 335, 336, 8, 35, "Input",ExpressionUUID->"c861310a-1582-46d7-a609-bf8b2aa80ece"],
Cell[11134, 345, 391, 10, 60, "Input",ExpressionUUID->"0b889494-19f0-4f93-998e-0e4ea17c67fc"],
Cell[11528, 357, 14234, 350, 78, "WolframAlphaShortInput",ExpressionUUID->"3ab090f3-0447-49e6-9b47-80da6ad8659f"],
Cell[25765, 709, 276, 8, 52, "Input",ExpressionUUID->"28eb0300-e621-4e71-9d2c-1d10131a5712"],
Cell[CellGroupData[{
Cell[26066, 721, 17509, 427, 101, "WolframAlphaShortInput",ExpressionUUID->"bd7e8ec8-e74e-40f9-8bff-6ac4e18033ad"],
Cell[43578, 1150, 579, 18, 40, "Output",ExpressionUUID->"ec10cb77-00aa-4b3b-a8f4-1df1e5f0ce1b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44194, 1173, 258, 4, 35, "Input",ExpressionUUID->"932cb67b-aa4b-4db3-9a30-818fc521d806"],
Cell[44455, 1179, 250, 5, 40, "Output",ExpressionUUID->"379e71c4-e86d-4989-84ca-2938cb736bf5"]
}, Open  ]],
Cell[44720, 1187, 154, 3, 35, "Input",ExpressionUUID->"e30cce16-dc63-4dd7-94f2-493abb504d5c"],
Cell[44877, 1192, 282, 6, 33, "Subitem",ExpressionUUID->"e59fa658-4b04-4cb6-bdfa-a70f1413d3b7"],
Cell[45162, 1200, 310, 7, 60, "Input",ExpressionUUID->"929603d5-3b45-4ab1-8c7c-bed4228acfd1"],
Cell[CellGroupData[{
Cell[45497, 1211, 206, 3, 35, "Input",ExpressionUUID->"01ddb7e5-252b-4491-85e3-a9f892230ee1"],
Cell[45706, 1216, 178, 2, 40, "Output",ExpressionUUID->"3b5b5db8-7769-4a18-b221-72bafe0f016c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45921, 1223, 202, 3, 35, "Input",ExpressionUUID->"81f8117b-d309-44b3-bd82-ce7d290cf107"],
Cell[46126, 1228, 153, 2, 40, "Output",ExpressionUUID->"7a411444-1fc4-4559-9435-b5d2f7ae6dd9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46316, 1235, 366, 9, 60, "Input",ExpressionUUID->"360698b6-96b1-4f86-876a-4f09343008a9"],
Cell[46685, 1246, 362, 9, 29, "Message",ExpressionUUID->"9cfd3490-0c51-4e4a-a66a-a7040e0a2913"],
Cell[47050, 1257, 343, 10, 46, "Output",ExpressionUUID->"2e7fbd05-91d5-437f-9a56-b0ae539838ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47430, 1272, 207, 3, 35, "Input",ExpressionUUID->"5cc5eb3d-e10f-45cf-995d-96cd36b703e9"],
Cell[47640, 1277, 149, 2, 40, "Output",ExpressionUUID->"ad731390-0a8f-4a29-a8c8-bde18ee55a59"]
}, Closed]],
Cell[47804, 1282, 209, 3, 29, "Input",ExpressionUUID->"9d49ecbf-1863-4a17-a73c-109f49842a4e"],
Cell[48016, 1287, 171, 3, 35, "Input",ExpressionUUID->"6841a8cb-a9d6-4322-9ef9-4313083e591f"],
Cell[CellGroupData[{
Cell[48212, 1294, 624, 12, 60, "Input",ExpressionUUID->"46a14888-9986-4345-8d16-7f7d7b8c6a8c"],
Cell[48839, 1308, 205, 3, 40, "Output",ExpressionUUID->"d805682f-49cb-418b-862d-349a30827355"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49081, 1316, 15612, 379, 78, "WolframAlphaShortInput",ExpressionUUID->"4f191a95-2d03-49b5-aeee-dc1941c9f1d0"],
Cell[64696, 1697, 181, 4, 64, "Output",ExpressionUUID->"148923bc-116f-4de4-b7be-22c1c0883a71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64914, 1706, 273, 6, 35, "Input",ExpressionUUID->"efde6f9c-265b-4bf2-9ac3-c36fe477b964"],
Cell[65190, 1714, 205, 3, 40, "Output",ExpressionUUID->"0c2ca64e-b450-4a98-849d-35da94403216"]
}, Open  ]],
Cell[65410, 1720, 154, 3, 35, "Input",ExpressionUUID->"aeb784d8-74c7-40fa-ba6f-80bfd44cce3d"],
Cell[65567, 1725, 15579, 378, 78, "WolframAlphaShortInput",ExpressionUUID->"7e571b6f-84ff-4795-92c9-68e9a167c896"],
Cell[81149, 2105, 186, 4, 35, "Input",ExpressionUUID->"7293411f-f134-4fd4-b3a8-368ef0fef1d5"],
Cell[CellGroupData[{
Cell[81360, 2113, 310, 7, 35, "Input",ExpressionUUID->"66bac31e-4ec8-4ce0-9532-617db309cc00"],
Cell[81673, 2122, 249, 5, 40, "Output",ExpressionUUID->"741c7f75-ee74-4a8c-9b9c-9d421196931b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81959, 2132, 161, 3, 35, "Input",ExpressionUUID->"b5d82f96-e38b-4066-9698-e10fb83bdefb"],
Cell[82123, 2137, 151, 2, 40, "Output",ExpressionUUID->"aba972c4-c90e-4749-8a6b-fdae615eac2e"]
}, Open  ]],
Cell[82289, 2142, 380, 9, 35, "Input",ExpressionUUID->"f87ac65b-56b9-46a6-b202-9619bb44fbd3"],
Cell[CellGroupData[{
Cell[82694, 2155, 399, 12, 60, "Input",ExpressionUUID->"bcd49a93-a8ff-4d9d-9aae-63c6c8405da1"],
Cell[83096, 2169, 314, 8, 40, "Output",ExpressionUUID->"cc0b8d04-44cc-480d-a93b-9c22d9e5250f"],
Cell[83413, 2179, 314, 8, 40, "Output",ExpressionUUID->"fcdd8d7e-3f59-44b2-b0ce-69dffaef621d"]
}, Open  ]],
Cell[83742, 2190, 208, 3, 35, "Input",ExpressionUUID->"5ec7d6b2-22e9-4969-bab7-9c58f5de519f"],
Cell[CellGroupData[{
Cell[83975, 2197, 131, 3, 35, "Input",ExpressionUUID->"0ae05ead-580b-4fe2-a350-113a1c494583"],
Cell[84109, 2202, 632, 19, 75, "Output",ExpressionUUID->"aeeb3a86-9bbb-4d47-9170-7091d9aa8e7a"]
}, Open  ]],
Cell[84756, 2224, 216, 5, 35, "Input",ExpressionUUID->"64a27a3e-044d-42a7-8d98-e2c7d1028704"],
Cell[CellGroupData[{
Cell[84997, 2233, 206, 3, 35, "Input",ExpressionUUID->"ce3c2179-6cc8-4671-8d9f-963d79d50469"],
Cell[85206, 2238, 181, 3, 40, "Output",ExpressionUUID->"75e6266f-0795-4f70-b63b-0c946f170ccf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85424, 2246, 351, 8, 35, "Input",ExpressionUUID->"e599f685-c648-47db-be88-cdf2d673545b"],
Cell[85778, 2256, 150, 2, 40, "Output",ExpressionUUID->"e453880c-db30-47ea-9ad0-3175f05916e2"]
}, Open  ]],
Cell[85943, 2261, 461, 11, 35, "Input",ExpressionUUID->"6f2822b3-a8c7-4c40-a1a0-b1d20345d0c8"],
Cell[86407, 2274, 503, 12, 35, "Input",ExpressionUUID->"0f2cc416-da7e-4553-8f0b-3359f080ff7b"],
Cell[86913, 2288, 203, 3, 35, "Input",ExpressionUUID->"8e1863c4-5edc-4ace-a46c-a889b43f8154"],
Cell[87119, 2293, 251, 5, 35, "Input",ExpressionUUID->"02dc1f57-0777-43b8-ba1d-a4e287cb4d7b"],
Cell[CellGroupData[{
Cell[87395, 2302, 373, 10, 35, "Input",ExpressionUUID->"bc125edc-1d00-471a-ab98-2f68d229db86"],
Cell[87771, 2314, 384, 10, 46, "Output",ExpressionUUID->"3013bbd8-5b95-4182-8606-d28b80d5b670"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88192, 2329, 201, 3, 35, "Input",ExpressionUUID->"54047ee6-686d-44d7-81d2-ef38746de702"],
Cell[88396, 2334, 389, 10, 46, "Output",ExpressionUUID->"99ea3291-de20-438b-8295-6ee23ed24fad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88822, 2349, 382, 11, 41, "Input",ExpressionUUID->"89d2453a-c04e-46df-83f6-5c85eac51ad4"],
Cell[89207, 2362, 580, 17, 40, "Output",ExpressionUUID->"0cf99ac7-5765-42ef-9132-fc22de7a40e4"]
}, Open  ]],
Cell[89802, 2382, 281, 6, 35, "Input",ExpressionUUID->"7a3e9a16-7359-4e8a-b4df-6f3c7a5152f5"],
Cell[CellGroupData[{
Cell[90108, 2392, 208, 3, 35, "Input",ExpressionUUID->"1a40c522-7c03-451f-93e5-5bcea255d9f6"],
Cell[90319, 2397, 569, 17, 40, "Output",ExpressionUUID->"bb12ac49-6070-4d84-8fb8-a959604b69a8"]
}, Open  ]],
Cell[90903, 2417, 330, 7, 35, "Input",ExpressionUUID->"5c619c3c-7b26-4a42-885d-026197a52f98"],
Cell[CellGroupData[{
Cell[91258, 2428, 331, 10, 60, "Input",ExpressionUUID->"5c3f1ea2-4da8-487f-a149-9992e417a78a"],
Cell[91592, 2440, 15226, 269, 300, "Output",ExpressionUUID->"7fd49b02-4cda-469c-a2ba-566e9649f22a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106855, 2714, 799, 19, 84, "Input",ExpressionUUID->"f6e83d4b-db56-45b1-ad6f-a4d33e15a37b"],
Cell[107657, 2735, 406, 9, 46, "Output",ExpressionUUID->"952d2cc2-03b3-46d0-8889-c8e830f025e3"],
Cell[108066, 2746, 1707, 45, 300, "Output",ExpressionUUID->"5a511893-dbbb-47f7-98aa-e92d78a6c526"]
}, Open  ]],
Cell[109788, 2794, 205, 4, 35, InheritFromParent,ExpressionUUID->"e07e51d3-9d3e-4de2-95c3-6490d805b969"],
Cell[109996, 2800, 154, 3, 35, InheritFromParent,ExpressionUUID->"61f9ba2e-a9b3-444e-8fe3-6744a818445f"],
Cell[110153, 2805, 156, 3, 35, InheritFromParent,ExpressionUUID->"0e72b327-e8a8-4f62-847c-652cb45367cd"],
Cell[110312, 2810, 152, 3, 35, InheritFromParent,ExpressionUUID->"b2f43029-e2d3-48c4-a9cb-04f4b23e63f8"],
Cell[110467, 2815, 179, 3, 35, "Input",ExpressionUUID->"fd7ee173-e615-4e69-9ecd-8d4e6e06b5bf"],
Cell[CellGroupData[{
Cell[110671, 2822, 184, 2, 51, "WolframAlphaLong",ExpressionUUID->"923150e7-85cd-4862-8843-e050a4f4e024"],
Cell[110858, 2826, 42290, 826, 652, "Print",ExpressionUUID->"b37deb6a-5797-48d4-926b-057255a00c0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153185, 3657, 188, 2, 51, "WolframAlphaLong",ExpressionUUID->"f8eb523a-0db3-4cef-a5d5-3033736d1424"],
Cell[153376, 3661, 12280, 238, 424, "Print",ExpressionUUID->"a31abd45-9a2f-4d88-a88d-4866b40f7eb2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165693, 3904, 189, 2, 51, "WolframAlphaLong",ExpressionUUID->"359c6f42-593e-4cfc-b3ad-3fe23c057494"],
Cell[165885, 3908, 14560, 282, 518, "Print",ExpressionUUID->"3962c58e-2d18-4247-b491-dc374a851f2c"]
}, Open  ]],
Cell[180460, 4193, 83, 0, 51, "WolframAlphaLong",ExpressionUUID->"93a09da9-7506-410e-9d7f-d5101054700d"],
Cell[180546, 4195, 187, 5, 466, "Input",ExpressionUUID->"3ee7031e-11c8-4e3f-af47-4ffd2f248d34"],
Cell[180736, 4202, 156, 3, 35, "Input",ExpressionUUID->"d1c2cb6a-6eed-4518-a3a1-08d4ca29a84c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180929, 4210, 145, 3, 121, "Title",ExpressionUUID->"3c90e118-e580-4372-bb99-8de68faecfed"],
Cell[181077, 4215, 154, 3, 35, "Input",ExpressionUUID->"88f729a1-ea2f-4465-8cf9-7d3afcd05f7d"],
Cell[181234, 4220, 125, 2, 35, "Input",ExpressionUUID->"48b59395-de8d-475f-aa9d-b2ee3f7bc48d"],
Cell[181362, 4224, 154, 3, 35, "Input",ExpressionUUID->"0d94d09d-3bdd-40b1-b2c8-9ead15262269"],
Cell[181519, 4229, 144, 2, 35, "Input",ExpressionUUID->"14af6693-67b3-4a1e-9bf4-9bdc4f39eab5"],
Cell[181666, 4233, 156, 3, 35, "Input",ExpressionUUID->"827d46da-b2a9-47be-8d80-c589c5a7aa03"],
Cell[181825, 4238, 146, 2, 35, "Input",ExpressionUUID->"cf8e71e8-65e7-4c45-9021-c7c7ffe3d5a3"],
Cell[181974, 4242, 144, 2, 35, "Input",ExpressionUUID->"ae467f54-8ad6-4467-91d9-ade57c2e3ae1"],
Cell[182121, 4246, 154, 3, 35, "Input",ExpressionUUID->"7381debf-c2f0-4e42-a58a-7f2dbaee54ae"],
Cell[182278, 4251, 144, 2, 35, "Input",ExpressionUUID->"70a156ed-41a9-4974-a276-3674359ca2ad"],
Cell[182425, 4255, 156, 3, 35, "Input",ExpressionUUID->"d110c1cf-abca-416f-8d5e-469698ff8052"]
}, Open  ]]
}
]
*)

